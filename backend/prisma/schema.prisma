// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(cuid())
  email       String  @unique
  password    String
  firstName   String
  lastName    String
  phoneNumber String? @unique

  banned  Boolean @default(false)
  premium Boolean @default(false)

  createdAt DateTime @default(now())

  tokens UserToken[]

  cars Car[]

  PushSubscription PushSubscription[]
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

model UserToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
}

model Car {
  id           String    @id @default(cuid())
  vin          String    @unique
  make         String
  model        String
  year         Int
  engine       String? // np. "2.0 TDI"
  power        Int? // moc w KM
  kilometers   Int? // przebieg
  registration String? // numer rejestracyjny
  purchaseDate DateTime? // data zakupu
  fuelType     String? // rodzaj paliwa
  color        String?
  createdAt    DateTime  @default(now())

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  Repair  Repair[]
  Expense Expense[]
  PlannedRepair PlannedRepair[]

  @@index([ownerId])
  FluidCheckPlan FluidCheckPlan[]
}

model Repair {
  id          String   @id @default(cuid())
  date        DateTime
  type        String
  description String?
  workshop    String?
  notes       String?
  kilometers  Int?      @default(0)
  cost        Float
  car         Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId       String
}

model Expense {
  id          String   @id @default(cuid())
  date        DateTime
  category    String
  amount      Float
  description String?
  car         Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId       String
}

model PlannedRepair {
  id          String   @id @default(cuid())
  type        String
  description String?
  date        DateTime
  cost        Float?
  notes       String?

  car         Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId       String

  createdAt   DateTime @default(now())
}

model FluidCheckPlan {
  id          String   @id @default(uuid())
  carId       String   @unique
  intervalDay Int    
  lastCheck   DateTime 
  nextCheck   DateTime
  enabled     Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  car Car @relation(fields: [carId], references: [id])
}

model PushSubscription {
  id        String   @id @default(uuid())
  userId    String
  endpoint  String   @unique
  auth      String
  p256dh    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}